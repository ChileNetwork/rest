diff --git a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
index 927078a..2165169 100644
--- a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+++ b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
@@ -135,17 +135,9 @@ class ProgrammerController extends BaseController
      */
     private function handleRequest(Request $request, Programmer $programmer)
     {
-        $data = json_decode($request->getContent(), true);
+        $data = $this->getJsonBody($request);
         $isNew = !$programmer->id;
 
-        if ($data === null) {
-            $problem = new ApiProblem(
-                ApiProblem::TYPE_INVALID_REQUEST_BODY_FORMAT,
-                400
-            );
-            throw new ApiProblemException($problem);
-        }
-
         // determine which properties should be changeable on this request
         $apiProperties = array('avatarNumber', 'tagLine');
         if ($isNew) {
@@ -155,12 +147,11 @@ class ProgrammerController extends BaseController
         // update the properties
         foreach ($apiProperties as $property) {
             // if a property is missing on PATCH, that's ok - just skip it
-            if (!isset($data[$property]) && $request->isMethod('PATCH')) {
+            if (!$data->has($property) && $request->isMethod('PATCH')) {
                 continue;
             }
 
-            $val = isset($data[$property]) ? $data[$property] : null;
-            $programmer->$property = $val;
+            $programmer->$property = $data->get($property);
         }
 
         $programmer->userId = $this->getLoggedInUser()->id;
diff --git a/src/KnpU/CodeBattle/Controller/Api/TokenController.php b/src/KnpU/CodeBattle/Controller/Api/TokenController.php
index 37b091e..18a42ef 100644
--- a/src/KnpU/CodeBattle/Controller/Api/TokenController.php
+++ b/src/KnpU/CodeBattle/Controller/Api/TokenController.php
@@ -20,10 +20,10 @@ class TokenController extends BaseController
     {
         $this->enforceUserSecurity();
 
-        $data = json_decode($request->getContent(), true);
+        $data = $this->getJsonBody($request);
 
         $token = new ApiToken($this->getLoggedInUser()->id);
-        $token->notes = $data['notes'];
+        $token->notes = $data->get('notes');
 
         $this->getApiTokenRepository()->save($token);
 
diff --git a/src/KnpU/CodeBattle/Controller/BaseController.php b/src/KnpU/CodeBattle/Controller/BaseController.php
index 153a2ab..e167a8d 100644
--- a/src/KnpU/CodeBattle/Controller/BaseController.php
+++ b/src/KnpU/CodeBattle/Controller/BaseController.php
@@ -9,6 +9,7 @@ use KnpU\CodeBattle\Application;
 use Silex\Application as SilexApplication;
 use Silex\ControllerCollection;
 use Silex\ControllerProviderInterface;
+use Symfony\Component\HttpFoundation\ParameterBag;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;
@@ -17,6 +18,8 @@ use KnpU\CodeBattle\Repository\ProgrammerRepository;
 use KnpU\CodeBattle\Repository\ProjectRepository;
 use KnpU\CodeBattle\Security\Token\ApiTokenRepository;
 use Symfony\Component\Security\Core\Exception\AccessDeniedException;
+use KnpU\CodeBattle\Api\ApiProblem;
+use KnpU\CodeBattle\Api\ApiProblemException;
 
 /**
  * Base controller class to hide Silex-related implementation details
@@ -242,4 +245,24 @@ abstract class BaseController implements ControllerProviderInterface
             throw new AccessDeniedException();
         }
     }
+
+    protected function getJsonBody(Request $request)
+    {
+        // allow for a possibly empty body
+        if (!$request->getContent()) {
+            $data = array();
+        } else {
+            $data = json_decode($request->getContent(), true);
+
+            if ($data === null) {
+                $problem = new ApiProblem(
+                    ApiProblem::TYPE_INVALID_REQUEST_BODY_FORMAT,
+                    400
+                );
+                throw new ApiProblemException($problem);
+            }
+        }
+
+        return new ParameterBag($data);
+    }
 }
