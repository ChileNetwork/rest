diff --git a/features/api/programmer.feature b/features/api/programmer.feature
index a52e61c..667ef35 100644
--- a/features/api/programmer.feature
+++ b/features/api/programmer.feature
@@ -53,6 +53,13 @@ Feature: Programmer
     And the "Content-Type" header should be "application/problem+json"
     And the "type" property should equal "invalid_body_format"
 
+  Scenario: Proper 404 exception on no programmer
+    When I request "GET /api/programmers/fake"
+    Then the response status code should be 404
+    And the "Content-Type" header should be "application/problem+json"
+    And the "type" property should equal "about:blank"
+    And the "title" property should equal "Not Found"
+
   Scenario: GET one programmer
     Given the following programmers exist:
       | nickname   | avatarNumber |
diff --git a/src/KnpU/CodeBattle/Api/ApiProblem.php b/src/KnpU/CodeBattle/Api/ApiProblem.php
index 39560ba..26c4eea 100644
--- a/src/KnpU/CodeBattle/Api/ApiProblem.php
+++ b/src/KnpU/CodeBattle/Api/ApiProblem.php
@@ -2,6 +2,8 @@
 
 namespace KnpU\CodeBattle\Api;
 
+use Symfony\Component\HttpFoundation\Response;
+
 /**
  * A wrapper for holding data to be used for a application/problem+json response
  */
@@ -24,16 +26,25 @@ class ApiProblem
 
     private $extraData = array();
 
-    public function __construct($type, $statusCode)
+    public function __construct($type = null, $statusCode)
     {
         $this->type = $type;
         $this->statusCode = $statusCode;
 
-        if (!isset(self::$titles[$type])) {
-            throw new \InvalidArgumentException('No title for type '.$type);
-        }
+        if (!$type) {
+            // no type? The default is about:blank and the title should
+            // be the standard status code message
+            $this->type = 'about:blank';
+            $this->title = isset(Response::$statusTexts[$statusCode])
+                ? Response::$statusTexts[$statusCode]
+                : 'Unknown HTTP status code :(';
+        } else {
+            if (!isset(self::$titles[$type])) {
+                throw new \InvalidArgumentException('No title for type '.$type);
+            }
 
-        $this->title = self::$titles[$type];
+            $this->title = self::$titles[$type];
+        }
     }
 
     public function toArray()
diff --git a/src/KnpU/CodeBattle/Application.php b/src/KnpU/CodeBattle/Application.php
index 3834b3c..6d9ae43 100644
--- a/src/KnpU/CodeBattle/Application.php
+++ b/src/KnpU/CodeBattle/Application.php
@@ -3,6 +3,7 @@
 namespace KnpU\CodeBattle;
 
 use Doctrine\Common\Annotations\AnnotationReader;
+use KnpU\CodeBattle\Api\ApiProblem;
 use KnpU\CodeBattle\Api\ApiProblemException;
 use KnpU\CodeBattle\Battle\PowerManager;
 use KnpU\CodeBattle\Repository\BattleRepository;
@@ -288,14 +289,25 @@ class Application extends SilexApplication
 
     private function configureListeners()
     {
-        $this->error(function(\Exception $e, $statusCode) {
-            // only do something special if we have an ApiProblemException!
-            if (!$e instanceof ApiProblemException) {
+        $app = $this;
+
+        $this->error(function(\Exception $e, $statusCode) use ($app) {
+            // only act on /api URLs
+            if (strpos($app['request']->getPathInfo(), '/api') !== 0) {
                 return;
             }
 
+            if ($e instanceof ApiProblemException) {
+                $apiProblem = $e->getApiProblem();
+            } else {
+                $apiProblem = new ApiProblem(
+                    null,
+                    $statusCode
+                );
+            }
+
             $response = new JsonResponse(
-                $e->getApiProblem()->toArray(),
+                $apiProblem->toArray(),
                 $statusCode
             );
             $response->headers->set('Content-Type', 'application/problem+json');
