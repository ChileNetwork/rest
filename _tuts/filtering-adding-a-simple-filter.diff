diff --git a/_tuts/auth-protect-more-endpoints.diff b/_tuts/auth-protect-more-endpoints.diff
index e80629c..3ac0486 100644
--- a/_tuts/auth-protect-more-endpoints.diff
+++ b/_tuts/auth-protect-more-endpoints.diff
@@ -1,5 +1,5 @@
 diff --git a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
-index fb3cdf3..85849ff 100644
+index fb3cdf3..4f4600c 100644
 --- a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 +++ b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 @@ -36,9 +36,7 @@ class ProgrammerController extends BaseController
@@ -13,15 +13,7 @@ index fb3cdf3..85849ff 100644
  
          $programmer = new Programmer();
          $this->handleRequest($request, $programmer);
-@@ -83,12 +81,16 @@ class ProgrammerController extends BaseController
- 
-     public function updateAction($nickname, Request $request)
-     {
-+        $this->enforceUserSecurity();
-+
-         $programmer = $this->getProgrammerRepository()->findOneByNickname($nickname);
- 
-         if (!$programmer) {
+@@ -89,6 +87,8 @@ class ProgrammerController extends BaseController
              $this->throw404('Oh no! This programmer has deserted! We\'ll send a search party!');
          }
  
@@ -30,7 +22,7 @@ index fb3cdf3..85849ff 100644
          $this->handleRequest($request, $programmer);
  
          if ($errors = $this->validate($programmer)) {
-@@ -106,6 +108,8 @@ class ProgrammerController extends BaseController
+@@ -106,6 +106,8 @@ class ProgrammerController extends BaseController
      {
          $programmer = $this->getProgrammerRepository()->findOneByNickname($nickname);
  
@@ -40,7 +32,7 @@ index fb3cdf3..85849ff 100644
              $this->delete($programmer);
          }
 diff --git a/src/KnpU/CodeBattle/Controller/BaseController.php b/src/KnpU/CodeBattle/Controller/BaseController.php
-index 9d6cc57..22de620 100644
+index 9d6cc57..7a0bbd0 100644
 --- a/src/KnpU/CodeBattle/Controller/BaseController.php
 +++ b/src/KnpU/CodeBattle/Controller/BaseController.php
 @@ -18,6 +18,7 @@ use Symfony\Component\HttpFoundation\Request;
@@ -51,7 +43,7 @@ index 9d6cc57..22de620 100644
  
  /**
   * Base controller class to hide Silex-related implementation details
-@@ -246,4 +247,19 @@ abstract class BaseController implements ControllerProviderInterface
+@@ -246,4 +247,21 @@ abstract class BaseController implements ControllerProviderInterface
  
          return $this->container['serializer']->serialize($data, $format, $context);
      }
@@ -65,6 +57,8 @@ index 9d6cc57..22de620 100644
 +
 +    protected function enforceProgrammerOwnershipSecurity(Programmer $programmer)
 +    {
++        $this->enforceUserSecurity();
++
 +        if ($this->getLoggedInUser()->id != $programmer->userId) {
 +            throw new AccessDeniedException();
 +        }
diff --git a/_tuts/auth-token-centralize-json-decode.diff b/_tuts/auth-token-centralize-json-decode.diff
index 8244bea..4fda5f3 100644
--- a/_tuts/auth-token-centralize-json-decode.diff
+++ b/_tuts/auth-token-centralize-json-decode.diff
@@ -1,8 +1,8 @@
 diff --git a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
-index 85849ff..f652dc5 100644
+index 4f4600c..e849006 100644
 --- a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 +++ b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
-@@ -125,17 +125,9 @@ class ProgrammerController extends BaseController
+@@ -123,17 +123,9 @@ class ProgrammerController extends BaseController
       */
      private function handleRequest(Request $request, Programmer $programmer)
      {
@@ -21,7 +21,7 @@ index 85849ff..f652dc5 100644
          // determine which properties should be changeable on this request
          $apiProperties = array('avatarNumber', 'tagLine');
          if ($isNew) {
-@@ -145,12 +137,11 @@ class ProgrammerController extends BaseController
+@@ -143,12 +135,11 @@ class ProgrammerController extends BaseController
          // update the properties
          foreach ($apiProperties as $property) {
              // if a property is missing on PATCH, that's ok - just skip it
@@ -54,7 +54,7 @@ index fbcc24f..3569b9c 100644
          $this->getApiTokenRepository()->save($token);
  
 diff --git a/src/KnpU/CodeBattle/Controller/BaseController.php b/src/KnpU/CodeBattle/Controller/BaseController.php
-index 22de620..55e2c51 100644
+index 7a0bbd0..bbead86 100644
 --- a/src/KnpU/CodeBattle/Controller/BaseController.php
 +++ b/src/KnpU/CodeBattle/Controller/BaseController.php
 @@ -10,6 +10,7 @@ use KnpU\CodeBattle\Application;
@@ -74,7 +74,7 @@ index 22de620..55e2c51 100644
  
  /**
   * Base controller class to hide Silex-related implementation details
-@@ -262,4 +265,23 @@ abstract class BaseController implements ControllerProviderInterface
+@@ -264,4 +267,23 @@ abstract class BaseController implements ControllerProviderInterface
          }
      }
  
diff --git a/_tuts/auth-token-token-validation.diff b/_tuts/auth-token-token-validation.diff
index a6d1601..7de9494 100644
--- a/_tuts/auth-token-token-validation.diff
+++ b/_tuts/auth-token-token-validation.diff
@@ -14,10 +14,10 @@ index 2253b2f..8402ed2 100644
 +    Then the response status code should be 400
 +    And the "errors.notes" property should equal "Please add some notes about this token"
 diff --git a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
-index f652dc5..9f22be6 100644
+index e849006..61bad86 100644
 --- a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 +++ b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
-@@ -146,15 +146,4 @@ class ProgrammerController extends BaseController
+@@ -144,15 +144,4 @@ class ProgrammerController extends BaseController
  
          $programmer->userId = $this->getLoggedInUser()->id;
      }
@@ -50,10 +50,10 @@ index 3569b9c..51d7298 100644
  
          return $this->createApiResponse($token, 201);
 diff --git a/src/KnpU/CodeBattle/Controller/BaseController.php b/src/KnpU/CodeBattle/Controller/BaseController.php
-index 55e2c51..f3cbd0c 100644
+index bbead86..a9ebfe9 100644
 --- a/src/KnpU/CodeBattle/Controller/BaseController.php
 +++ b/src/KnpU/CodeBattle/Controller/BaseController.php
-@@ -284,4 +284,15 @@ abstract class BaseController implements ControllerProviderInterface
+@@ -286,4 +286,15 @@ abstract class BaseController implements ControllerProviderInterface
  
          return new ParameterBag($data);
      }
diff --git a/_tuts/filtering-adding-a-simple-filter.diff b/_tuts/filtering-adding-a-simple-filter.diff
index 2274564..5beeff5 100644
--- a/_tuts/filtering-adding-a-simple-filter.diff
+++ b/_tuts/filtering-adding-a-simple-filter.diff
@@ -1,5 +1,5 @@
 diff --git a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
-index 5190162..04f1933 100644
+index da5c8e3..961bb7b 100644
 --- a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 +++ b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 @@ -89,7 +89,13 @@ class ProgrammerController extends BaseController
diff --git a/_tuts/hal-browser-use-collectionrepresentation.diff b/_tuts/hal-browser-use-collectionrepresentation.diff
index 13e55ae..6a7a46c 100644
--- a/_tuts/hal-browser-use-collectionrepresentation.diff
+++ b/_tuts/hal-browser-use-collectionrepresentation.diff
@@ -1,5 +1,5 @@
 diff --git a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
-index 9f22be6..75d784a 100644
+index 61bad86..7a9bedc 100644
 --- a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 +++ b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 @@ -2,6 +2,7 @@
diff --git a/_tuts/hateoas-hal-media-type.diff b/_tuts/hateoas-hal-media-type.diff
index 4b3404c..bc554c2 100644
--- a/_tuts/hateoas-hal-media-type.diff
+++ b/_tuts/hateoas-hal-media-type.diff
@@ -8,7 +8,7 @@ index 9982895..8d65447 100644
      And the "_links.programmer.href" property should equal "/api/programmers/Fred"
 +    And the "Content-Type" header should be "application/hal+json"
 diff --git a/src/KnpU/CodeBattle/Controller/BaseController.php b/src/KnpU/CodeBattle/Controller/BaseController.php
-index f3cbd0c..7e9fc48 100644
+index a9ebfe9..5e465a4 100644
 --- a/src/KnpU/CodeBattle/Controller/BaseController.php
 +++ b/src/KnpU/CodeBattle/Controller/BaseController.php
 @@ -239,7 +239,7 @@ abstract class BaseController implements ControllerProviderInterface
diff --git a/_tuts/homepage-add-link-to-programmers.diff b/_tuts/homepage-add-link-to-programmers.diff
index a7ca7bb..b674b00 100644
--- a/_tuts/homepage-add-link-to-programmers.diff
+++ b/_tuts/homepage-add-link-to-programmers.diff
@@ -1,5 +1,5 @@
 diff --git a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
-index fdb1db1..6280b6e 100644
+index 2ce65db..bf89e47 100644
 --- a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 +++ b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 @@ -29,7 +29,8 @@ class ProgrammerController extends BaseController
diff --git a/_tuts/homepage-basic-response.diff b/_tuts/homepage-basic-response.diff
index 1166ef8..1bce291 100644
--- a/_tuts/homepage-basic-response.diff
+++ b/_tuts/homepage-basic-response.diff
@@ -1,5 +1,5 @@
 diff --git a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
-index ba25e19..abe3213 100644
+index d40305e..77291b2 100644
 --- a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 +++ b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 @@ -19,6 +19,9 @@ class ProgrammerController extends BaseController
diff --git a/_tuts/homepage-create-model-with-self.diff b/_tuts/homepage-create-model-with-self.diff
index ecc790a..4852582 100644
--- a/_tuts/homepage-create-model-with-self.diff
+++ b/_tuts/homepage-create-model-with-self.diff
@@ -1,5 +1,5 @@
 diff --git a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
-index abe3213..fdb1db1 100644
+index 77291b2..2ce65db 100644
 --- a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 +++ b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 @@ -6,6 +6,7 @@ use Hateoas\Representation\CollectionRepresentation;
diff --git a/_tuts/pagination-adding-faked-pagination.diff b/_tuts/pagination-adding-faked-pagination.diff
index 3f63b4a..ec21291 100644
--- a/_tuts/pagination-adding-faked-pagination.diff
+++ b/_tuts/pagination-adding-faked-pagination.diff
@@ -1,5 +1,5 @@
 diff --git a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
-index 6280b6e..603e81a 100644
+index bf89e47..c16548e 100644
 --- a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 +++ b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 @@ -3,6 +3,7 @@
diff --git a/_tuts/pagination-adding-real-simple-implementation.diff b/_tuts/pagination-adding-real-simple-implementation.diff
index fdc60c8..82dbad4 100644
--- a/_tuts/pagination-adding-real-simple-implementation.diff
+++ b/_tuts/pagination-adding-real-simple-implementation.diff
@@ -1,5 +1,5 @@
 diff --git a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
-index 603e81a..5190162 100644
+index c16548e..da5c8e3 100644
 --- a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 +++ b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 @@ -87,16 +87,19 @@ class ProgrammerController extends BaseController
diff --git a/_tuts/programmer-battles-implementing-endpoint.diff b/_tuts/programmer-battles-implementing-endpoint.diff
index 33a8a06..573e175 100644
--- a/_tuts/programmer-battles-implementing-endpoint.diff
+++ b/_tuts/programmer-battles-implementing-endpoint.diff
@@ -1,5 +1,5 @@
 diff --git a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
-index 75d784a..ba25e19 100644
+index 7a9bedc..d40305e 100644
 --- a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 +++ b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
 @@ -33,6 +33,9 @@ class ProgrammerController extends BaseController
@@ -40,4 +40,4 @@ index 75d784a..ba25e19 100644
 +
      public function updateAction($nickname, Request $request)
      {
-         $this->enforceUserSecurity();
+         $programmer = $this->getProgrammerRepository()->findOneByNickname($nickname);
diff --git a/_tuts/steps.json b/_tuts/steps.json
index 922754d..f263295 100644
--- a/_tuts/steps.json
+++ b/_tuts/steps.json
@@ -521,5 +521,5 @@
             "description": null
         }
     ],
-    "sha": "552ab6ce979c598b2c9c6a7a48909d2a4cb521a0"
+    "sha": "e0b37db6694307d8eaf7820a1df49f7ca6f6e199"
 }
\ No newline at end of file
diff --git a/knpu/episode2/api-homepage.rst b/knpu/episode2/api-homepage.rst
new file mode 100644
index 0000000..b73026e
--- /dev/null
+++ b/knpu/episode2/api-homepage.rst
@@ -0,0 +1,2 @@
+API Homepage
+============
\ No newline at end of file
diff --git a/knpu/episode2/authentication-via-token.rst b/knpu/episode2/authentication-via-token.rst
index 7ea943c..aa169f5 100644
--- a/knpu/episode2/authentication-via-token.rst
+++ b/knpu/episode2/authentication-via-token.rst
@@ -9,21 +9,49 @@ You should know where to start: in one of our feature files. We're going
 to modify an existing scenario. See the ``Background`` of our programmer
 feature file? One of the things that we do before every single scenario is
 to make sure the ``weaverryan`` user exists in the database. We aren't sending
-authentication headers, just guaranteeing that the user exists in the database.
+authentication headers, just guaranteeing that the user exists in the database:
+
+.. code-block:: gherkin
+
+    # features/api/programmer.feature
+    # ...
+
+    Background:
+      Given the user "weaverryan" exists
+      
+    # ... scenarios
+
+Sending an Authorization Header on each Request
+-----------------------------------------------
 
 In the background, I already have a database table for tokens, and each token
 has a foreign-key relation to one user. So I'm going to extend the ``Background``
 a little bit to create a token in that table that relates to ``weaverryan``.
 And this is the important part, this says that on whatever request we make
 inside of our scenario, I want to send an ``Authorization`` header set to
-token, a space then ``ABCD123``.
+token, a space then ``ABCD123``:
+
+.. code-block:: gherkin
+
+    # features/api/programmer.feature
+    # ...
+
+    Background:
+      Given the user "weaverryan" exists
+      And "weaverryan" has an authentication token "ABCD123"
+      And I set the "Authorization" header to be "token ABCD123"
+
+    # ... scenarios
 
 Why did I choose to set the ``Authorization`` header or this "token space"
 format? Technically, none of this is important. In a second, you'll see us
 grab and parse this header. If you use OAuth, it has directions on the type
-of names you should give these things. So I’m just using authorization header
+of names you should give these things. So I'm just using authorization header
 and the word token, space and the actual authentication token that we're sending.
 
+Hey You! Use HTTPS. No Excuses.
+-------------------------------
+
 By the way, we aren't doing it in this tutorial, but one thing that that's
 really important for authentication across your API is that you only do it
 over HTTPS. The easiest way to do this is to require HTTPS across your entire 
@@ -32,68 +60,244 @@ plain text, and that's a recipe for disaster.
 
 If we rerun one of our tests right now, it's not going to make any difference. 
 To prove it, let's rerun the first scenario of ``programmer.feature``, which
-starts at line 11. So we say ``:11`` and it's going to fail. It *is* setting
-that ``Authorization`` header, but we aren't actually doing anything with
-it yet in our app. So we're getting that 401 authentication required message.
+starts at line 11. So we say ``:11`` and it's going to fail:
+
+.. code-block:: bash
+
+    php vendor/bin/behat features/api/programmer.feature:11
+
+It *is* setting that ``Authorization`` header, but we aren't actually doing
+anything with it yet in our app. So we're getting that 401 authentication
+required message.
+
+Authenticating a User via a Token
+---------------------------------
 
 So let's hook this up! Some of this is specific to Silex's security system,
 but in case you're using something else, we'll stay high level enough to see
 what types of things you need to do in your system to make it happen. As always,
 if you have questions, just ask them in the comments!
 
-Inside this security directory here, I've already set up a bunch of things
-for an API token authentication system. The first thing we're going to do
-is open this ``ApiTokenListener``. I've written some fake code in here as
-you can see. The job of the listener is to look at the request object and
-find the token information off of it. And hey, since we're sending the token
-on the ``Authorization`` header, we are going to look for it there. So let's
-get rid of this hard coded text and instead go get that ``Authorization`` header. 
-You can say ``$request->headers->get('Authorization')``. That's going to get you 
-the actual raw ``token ABCD123`` type of thing. 
+Inside this ``Security/`` directory here, I've already set up a bunch of
+things for an API token authentication system
+
+1) ApiTokenListener: Gets the Token from the Request
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+The first thing we're going to do is open this ``ApiTokenListener``. I've
+written some fake code in here as you can see::
+
+    // src/KnpU/CodeBattle/Security/Authentication/ApiTokenListener.php
+    // ...
+
+    class ApiTokenListener implements ListenerInterface
+    {
+        // ...
+
+        public function handle(GetResponseEvent $event)
+        {
+            // ...
+            $request = $event->getRequest();
+
+            // there may not be authentication information on this request
+            if (!$request->headers->has('Authorization')) {
+                return;
+            }
+
+            // TODO - remove this return statement and add real code!
+            return;
+            // format should be "Authorization: token ABCDEFG"
+            $tokenString = 'HARDCODED';
+
+            if (!$tokenString) {
+                // there's no authentication info for us to process
+                return;
+            }
+            
+            // some code that sends the tokenString into the Silex security system
+            // ...
+        }
+    
+        // ...
+    }
+
+The job of the listener is to look at the request object and get the token
+information off of it. And hey, since we're sending the token on the ``Authorization``
+header, we are going to look for it there. So let's get rid of this hard
+coded text and instead go get that ``Authorization`` header.  You can say
+``$request->headers->get('Authorization')``. That's going to get you the actual
+raw ``token ABCD123`` type of thing::
+
+    // src/KnpU/CodeBattle/Security/Authentication/ApiTokenListener.php
+    // ...
+    
+    public function handle(GetResponseEvent $event)
+    {
+        // ...
+        $request = $event->getRequest();
+
+        $authorizationHeader = $request->headers->get('Authorization');
+        // ...
+    }
 
 Next, since the actual token is the second part of that, we need to parse
-it out. I'll say, ``$tokenString = $this->parseAuthorizationHeader``, which
+it out. I'll say, ``$tokenString = $this->parseAuthorizationHeader()``, which
 is a function I’ve already created down here. It's a private function that
-expects a format of token space and gets the second part for you. Perfect!
+expects a format of token space and gets the second part for you::
+
+    // src/KnpU/CodeBattle/Security/Authentication/ApiTokenListener.php
+    // ...
+    
+    public function handle(GetResponseEvent $event)
+    {
+        // ...
+        $request = $event->getRequest();
+
+        $authorizationHeader = $request->headers->get('Authorization');
+        $tokenString = $this->parseAuthorizationHeader($authorizationHeader);
+        // ...
+    }
+    
+    /**
+     * Takes in "token ABCDEFG" and returns "ABCDEFG"
+     */
+    private function parseAuthorizationHeader($authorizationHeader)
+    {
+        // ...
+    }
+
+Perfect!
 
 At this point the ``$tokenString`` is ``ABCD123``. So that's all I want to
 talk about in this ``TokenListener``, it's the only job of this class.
 
-Next, I’m going to open up the ``ApiTokenProvider``, it's job is to take
+1) ApiTokenProvider: Uses the Token to find a User
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+Next, I'm going to open up the ``ApiTokenProvider``. Its job is to take
 the token string ``ABCD123`` and try to look up a valid ``User`` object
-in the database for it. First, remember how I have an ``api_token`` table in
-my database? Let me show you some of the behind-the-scenes magic. You can
-see here I am creating an ``api_token`` table. It has a token column which
-is the string and a ``user_id`` column which is the user it relates to. So
-you can imagine a big table full of tokens and each token is related to exactly
-one user. For example, if we look up the entry in the token table, we can figure out
-"yes" this is a valid token and it is a valid token for a user whose ``id``
-is ``5``.
+in the database for it. First, remember how I have an ``api_token`` table
+in my database? Let me show you some of the behind-the-scenes magic::
+
+    // src/KnpU/CodeBattle/DataFixtures/FixturesManager.php
+    // this is an internal class that creates our database tables
+    
+    $tokenTable = new Table('api_token');
+    $tokenTable->addColumn('id', 'integer'();
+    $tokenTable->addColumn('token', 'string', array('length' => 32));
+    $tokenTable->addColumn('userId', 'integer');
+    $tokenTable->addColumn('notes', 'string', array('length' => 255));
+    $tokenTable->addColumn('createdAt', 'datetime');
+    // ...
+
+You can see here I am creating an ``api_token`` table. It has a token column
+which is the string and a ``user_id`` column which is the user it relates
+to. So you can imagine a big table full of tokens and each token is related
+to exactly one user. For example, if we look up the entry in the token table,
+we can figure out "yes" this is a valid token and it is a valid token for a
+user whose ``id`` is ``5``.
 
 So here, the first thing we'll do is actually go and look up the token row.
 I don't want to get into the details of exactly how this all hooks up because
 I want to focus on REST. But I've already configured this class and created
 some code behind the scenes to take in a token string, which is the ``ABCD123``
 thing in our case and return to me an ``ApiToken`` object, which represents
-a row in that table. So we've taken the string and we've queried for a row
-in the table. If we don't have that row, we throw an exception which causes
-a 401 bad credentials error.
+a row in that table::
+
+    // src/KnpU/CodeBattle/Security/Authentication/ApiTokenProvider.php
+    // ...
+    
+    class ApiTokenProvider implements AuthenticationProviderInterface
+    {
+        // ...
+
+        public function authenticate(TokenInterface $token)
+        {
+            // the actual token string value from the header - e.g. ABCDEFG
+            $tokenString = $token->getCredentials();
+
+            // find the ApiToken object in the database based on the TokenString
+            $apiToken = $this->apiTokenRepository->findOneByToken($tokenString);
+            
+            if (!$apiToken) {
+                throw new BadCredentialsException('Invalid token');
+            }
+
+            // ... finishing code that's already written ...
+        }
+        // ...
+    }
+
+So we've taken the string and we've queried for a row in the table. If we
+don't have that row, we throw an exception which causes a 401 bad credentials
+error.
 
 Next, when we have that, we just need to look up the ``User`` object from it.
 Remember, the job of this class is start with the token string and eventually
 give us a ``User`` object. And it does that by going through the ``api_token``
-table. And that's the job of this ``ApiTokenProvider`` class. It's technical
-and at the core of Silex's security system, so I just want you to internalize
+table::
+
+    // src/KnpU/CodeBattle/Security/Authentication/ApiTokenProvider.php
+    // ...
+    
+    class ApiTokenProvider implements AuthenticationProviderInterface
+    {
+        // ...
+
+        public function authenticate(TokenInterface $token)
+        {
+            // the actual token string value from the header - e.g. ABCDEFG
+            $tokenString = $token->getCredentials();
+
+            // find the ApiToken object in the database based on the TokenString
+            $apiToken = $this->apiTokenRepository->findOneByToken($tokenString);
+            
+            if (!$apiToken) {
+                throw new BadCredentialsException('Invalid token');
+            }
+
+            $user = $this->userRepository->find($apiToken->userId);
+
+            // ... finishing code that's already written ...
+        }
+        // ...
+    }
+
+And that's the job of this ``ApiTokenProvider`` class. It's technical and
+at the core of Silex's security system, so I just want you to internalize
 what it does.
 
+It Works! Get the Logged-In User
+--------------------------------
+
 At this point - between these two classes and a few other things I've setup -
 if we send this ``Authorization`` header with a valid token, by the time we
 get it to our ``ProgrammerController``, ``$this->getLoggedInUser()`` will
 actually return to us the ``User`` object that's attached to the token that
-was sent. In the case of our scenario, since we're sending a token of ``ABCD123``,
+was sent::
+
+    // src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+
+    public function newAction(Request $request)
+    {
+        // will return the User related to the token form the Authorization header!
+        if (!$this->isUserLoggedIn()) {
+            throw new AccessDeniedException();
+        }
+        // ...
+    }
+
+In the case of our scenario, since we're sending a token of ``ABCD123``,
 it means that we'll get a ``User`` object that represents this ``weaverryan``
 user. We will actually be logged in, except we're logged in via the API
-token. So, let's try this out. And there it is!
+token. So, let's try this out.
+
+.. code-block:: bash
+
+    php vendor/bin/behat features/api/programmer.feature:11
+
+And there it is!
 
 The guts for getting this all working can be complicated, but the end result
 is so simple: send an ``Authorization`` header with the api token and use
@@ -103,4 +307,14 @@ this token is attached to.
 So now, in ``handleRequest()``, I have this ugly hard-coded logic that assumed
 that there is a user called ``weaverryan``. Replace this garbage
 with ``$this->getLoggedinUser()`` to get the real user object that's 
-attached to our token.
+attached to our token::
+
+    // src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+
+    private function handleRequest(Request $request, Programmer $programmer)
+    {
+        // ...
+
+        $programmer->userId = $this->getLoggedInUser()->id;        
+    }
diff --git a/knpu/episode2/battle-resource-endpoints.rst b/knpu/episode2/battle-resource-endpoints.rst
new file mode 100644
index 0000000..1212268
--- /dev/null
+++ b/knpu/episode2/battle-resource-endpoints.rst
@@ -0,0 +1,2 @@
+Battle Resource Endpoints
+=========================
diff --git a/knpu/episode2/centralizing-error-response-creation.rst b/knpu/episode2/centralizing-error-response-creation.rst
index 0741850..fc56db1 100644
--- a/knpu/episode2/centralizing-error-response-creation.rst
+++ b/knpu/episode2/centralizing-error-response-creation.rst
@@ -51,3 +51,5 @@ Sahweet! They're passing too!
 
 So there's no chance of duplication because everything is going through that
 same class.
+
+.. _`dependency injection`: https://knpuniversity.com/screencast/dependency-injection
diff --git a/knpu/episode2/creating-tokens-in-the-api.rst b/knpu/episode2/creating-tokens-in-the-api.rst
index 966fa50..09e2169 100644
--- a/knpu/episode2/creating-tokens-in-the-api.rst
+++ b/knpu/episode2/creating-tokens-in-the-api.rst
@@ -5,7 +5,7 @@ Our API clients can send a token with their request to become authenticated.
 But now they need a way to actually create and manage these tokens!
 
 Actually, this is already possible via the web interface. First, let me delete
-our SQLite database, because the tests use that same databse and it deletes
+our SQLite database, because the tests use that same database and it deletes
 my test user. Now, we can login as ryan@knplabs.com password ``foo``. If
 you go to the url ``/tokens``, you see I have a little interface here. I can
 add a token, put a message, click `tokenify-me` and there we go, I've got
@@ -235,7 +235,7 @@ object, we'll just call the same function, pass it the token instead of the
 programmer and throw that same error. Perfect, so this actually should all
 be setup. Of course what I forgot to do was write the scenario first, so shame
 on me~ Let's write the  scenario to make sure this is working. I'll copy most
-of the working version. Hhere, we won't actually pass any request body. Fortunately
+of the working version. Here, we won't actually pass any request body. Fortunately
 we've made our decode function able to handle that. We know the status code
 is going to be 400. We can check to see that the ``errors.notes`` property
 will equal the message that is actually on the ``ApiToken`` class. It will
diff --git a/knpu/episode2/filtering.rst b/knpu/episode2/filtering.rst
new file mode 100644
index 0000000..ae670c7
--- /dev/null
+++ b/knpu/episode2/filtering.rst
@@ -0,0 +1,2 @@
+Filtering!
+==========
\ No newline at end of file
diff --git a/knpu/episode2/hal-browser.rst b/knpu/episode2/hal-browser.rst
new file mode 100644
index 0000000..8fb9e37
--- /dev/null
+++ b/knpu/episode2/hal-browser.rst
@@ -0,0 +1,2 @@
+HAL Browser
+===========
\ No newline at end of file
diff --git a/knpu/episode2/hateoas-installation.rst b/knpu/episode2/hateoas-installation.rst
new file mode 100644
index 0000000..0ca7b22
--- /dev/null
+++ b/knpu/episode2/hateoas-installation.rst
@@ -0,0 +1,2 @@
+HATEOAS Installation
+====================
\ No newline at end of file
diff --git a/knpu/episode2/hateoas-linking-embedding.rst b/knpu/episode2/hateoas-linking-embedding.rst
new file mode 100644
index 0000000..4b7217f
--- /dev/null
+++ b/knpu/episode2/hateoas-linking-embedding.rst
@@ -0,0 +1,2 @@
+HATEOAS Linking and Embedding
+=============================
diff --git a/knpu/episode2/link-all-the-resources.rst b/knpu/episode2/link-all-the-resources.rst
new file mode 100644
index 0000000..869232f
--- /dev/null
+++ b/knpu/episode2/link-all-the-resources.rst
@@ -0,0 +1,2 @@
+Link all the Resources!
+=======================
\ No newline at end of file
diff --git a/knpu/episode2/metadata.yml b/knpu/episode2/metadata.yml
index b247b7b..49b89df 100644
--- a/knpu/episode2/metadata.yml
+++ b/knpu/episode2/metadata.yml
@@ -1,49 +1,63 @@
 title:  RESTful APIs in the Real World Episode 2
-price:  0
-length: ~
 summary: |
     Making RESTful APIs is hard, really hard. There are a lot of concepts
     to know - resources, representations, HTTP methods, status codes, etc.
+    
+    Episode 1 got us really comfortable with all the terminology. So in episode 2,
+    we're attacking the *hard* stuff:
 
-    In the upcoming episode 2 of this series, we'll cover the hard stuff,
-    by continuing our real tutorial:
-
+    * Using a serializer
+    * Token Authentication System
     * Hypermedia and HATOEAS
     * Documenting your API
     * Content-Type negotiation
     * Pagination and filtering
     * A lot of other pieces in between!
+    
+    This stuff is not easy. But if you make it through, you'll be armed to
+    attack whatever API need you have.
 
 illustration: rest2.png
-priority: 0
-tags:
-    - { name: php }
-status: upcoming
 hasVideoDownload: 0
 
+tuts_hero:
+    start_step: errors-making-type-a-url
+
 chapters:
     serializer:
-        video_key: xxx
+        video_key: fm0btcnzhb
+        is_free:   true
     serializer-configuration:
-        video_key: xxx
+        video_key: bp2odxm0bq
+        is_free:   true
     serializer-annotations:
-        video_key: xxx
-    # authentication
+        video_key: dje40nkyfj
+        is_free:   true
     requiring-authentication:
-        video_key: xxx
-    # auth-token
+        video_key: ikji1yf0e4
     authentication-via-token:
-        video_key: xxx
-    # authorization
+        video_key: 16ps98c21j
     securing-more-endpoints:
-        video_key: xxx
-    # auth-advanced
+        video_key: wfk8k6q9we
     authentication-error-format:
-        video_key: xxx
-    # error-response-factory
+        is_finished: false
     centralizing-error-response-creation:
-        video_key: xxx
-    # token
+        is_finished: false
     creating-tokens-in-the-api:
-        video_key: xxx
-
+        is_finished: false
+    battle-resource-endpoints:
+        is_finished: false
+    hateoas-installation:
+        is_finished: false
+    hateoas-linking-embedding:
+        is_finished: false
+    hal-browser:
+        is_finished: false
+    link-all-the-resources:
+        is_finished: false
+    api-homepage:
+        is_finished: false
+    pagination:
+        is_finished: false
+    filtering:
+        is_finished: false
diff --git a/knpu/episode2/pagination.rst b/knpu/episode2/pagination.rst
new file mode 100644
index 0000000..8fd6abc
--- /dev/null
+++ b/knpu/episode2/pagination.rst
@@ -0,0 +1,2 @@
+Pagination
+==========
\ No newline at end of file
diff --git a/knpu/episode2/requiring-authentication.rst b/knpu/episode2/requiring-authentication.rst
index 6cc18fc..483547e 100644
--- a/knpu/episode2/requiring-authentication.rst
+++ b/knpu/episode2/requiring-authentication.rst
@@ -22,15 +22,24 @@ we're kind of faking the attachment of a programmer to a user. In ``newAction``
 we call this function ``handleRequest``,  which lives right in this same class.
 Then down here on the bottom, you can see *how* we fake it::
 
-    // todo
+    // src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+
+    private function handleRequest(Request $request, Programmer $programmer)
+    {
+        // update the programmer from the request data
+        // ...
+
+        $programmer->userId = $this->findUserByUsername('weaverryan')->id;
+    }
 
 We assume there's a user called ``weaverryan`` in the database, grab it's
 ``id`` and attach that to every programmer. So obviously that's just hardcoded
 silliness and we need to get rid of it! We need some way for the API request
 to authenticate itself as a user.
 
-Tokens
-------
+Denying Access with a 401 (in Behat)
+------------------------------------
 
 We're going to do this with tokens. You can create your own simple token
 system or you can do something bigger like OAuth. The important thing to
@@ -44,57 +53,166 @@ done anything with authentication yet. For Behat newbies, this will feel
 weird, but stick with me. I'm going to describe here the business value of
 our authentication feature and who benefits from it, which is the API client.
 That part is not important technically, but we'd pity the fool who doesn't
-think about why they're building a feature.
+think about why they're building a feature:
+
+.. code-block:: gherkin
+
+    # features/api/authentication.feature
+    Feature: Authentication
+      In order to access protected resource
+      As an API client
+      I need to be able to authenticate
+
 
 Below that, let's add our first scenario, which is going to be one where we
 try to create a programmer without sending a token. Ultimately we want to
 require authentication on most endpoints.
 
-If I just post to ``/api/programmers`` with no token, the response I
-get should be 401. We don't know what the response is going to look like
-yet, but let's imagine that it's JSON and has some ``detail`` key on it which
+.. code-block:: gherkin
+
+    # features/api/authentication.feature
+    Feature: Authentication
+      # ...
+
+      Scenario: Create a programmer without authentication
+        When I request "POST /api/programmers"
+        Then the response status code should be 401
+        And the "detail" property should equal "Authentication Required"
+
+If I just post to ``/api/programmers`` with no token, the response I get
+should be 401. We don't know what the response is going to look like yet,
+but let's imagine that it's JSON and has some ``detail`` key on it which
 gives us a little bit of information about what went wrong. 
 
 So there we go! No coding yet, but we know how things should look if we don't
 send a token. If we try this right now - which is always a good idea - we
-should see it fail. By the way we can run one feature file at a time, and that's
-going to be really useful for us. And there we go! You can see it's giving
-us a 400 error because we're sending invalid JSON instead of the 401 we want.
+should see it fail. By the way we can run one feature file at a time, and
+that's going to be really useful for us:
+
+.. code-block:: bash
+
+    php vendor/bin/behat features/api/authentication.feature
+
+And there we go! You can see it's giving us a 400 error because we're sending
+invalid JSON instead of the 401 we want.
+
+Denying Access in your Controller
+---------------------------------
 
 So let's go into ``ProgrammerController`` and fix this as easily as possible
 up in ``newAction``. I already have a function called ``getLoggedinUser()``,
 which will either give us a ``User`` object or give us ``null`` if the request
-isn't authenticated. What we can do is check if ``!getLoggedInUser()`` and then
-return the access denied page. In Silex, you do this by throwing a special
+isn't authenticated. What we can do is check if ``!getLoggedInUser()`` and
+then return the access denied page. In Silex, you do this by throwing a special
 exception called ``AccessDeniedException``. Make sure you have the right
-``use`` statement for this, which is in the ``Security`` component. And there
-we go! Since that should deny access, let's try our test. 
+``use`` statement for this, which is in the ``Security`` component::
+
+    // src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+    
+    use Symfony\Component\Security\Core\Exception\AccessDeniedException;
+    // ...
+
+    public function newAction(Request $request)
+    {
+        if (!$this->isUserLoggedIn()) {
+            throw new AccessDeniedException();
+        }
+        // ..
+    }
+
+And there we go! Since that should deny access, let's try our test:
+
+.. code-block:: bash
+
+    php vendor/bin/behat features/api/authentication.feature
+
+Boom! And this time you can see that we *are* passing the 401 test. Get outta
+here ya tokenless request! The only issue is that the response body is coming
+back slightly  different than we expected. There *is* a ``detail`` property,
+but instead of it  being set to "authentication required", it's set to this
+``not privileged to request the resource`` string. And yea, it's not really
+obvious where that's coming from.
 
-Boom! And this time you can see that we *are* passing the 401 test. Get outta here
-ya tokenless request! The only issue is that the response body is coming back slightly 
-different than we expected. There *is* a ``detail`` property, but instead of it 
-being set to "authentication required", it's set to this ``not privileged to request 
-the resource``string. And yea, it's not really obvious where that's coming from.
+What Happens when you Deny Access Anyways?
+------------------------------------------
 
 But first, how is this even working behind the scenes? If you were with us
 for episode 1, we did some pretty advanced error handling stuff at the bottom
 of this ``Application`` class. What we basically did was add a function that's
 called anytime there's an exception thrown *anywhere*. Then, we transform
 that into a consistent JSON response that follows the `API problem`_ format.
-So any exception gives us a nice consistent response.
+So any exception gives us a nice consistent response::
+
+    src/KnpU/CodeBattle/Application.php
+    // ...
+    
+    $this->error(function(\Exception $e, $statusCode) use ($app) {
+        // ...
+
+        $data = $apiProblem->toArray();
+
+        $response = new JsonResponse(
+            $data,
+            $apiProblem->getStatusCode()
+        );
+        $response->headers->set('Content-Type', 'application/problem+json');
+        
+        return $response;
+    });
 
 And hey, when we deny access, *we're throwing an exception*! But bad news,
-our exception is the *one* weird guy in the *whole* system: instead of
-being handled here, it's handled somewhere else entirely.
+our exception is the *one* weird guy in the *whole* system: instead of being
+handled here, it's handled somewhere else entirely.
+
+ApiEntryPoint: Where Security Responses are Created
+---------------------------------------------------
 
 Without getting too far into things, I've already written *most* of the logic
 for our token authentication system, and I'll show you the important parts
 but not cover how this all hooks up. If you have more detailed questions,
-just ask them on the comments.
+just ask them in the comments.
 
 Let's open up a class in my ``Security/Authentication`` directory called
 ``ApiEntryPoint``. When we deny access, the ``start()`` method is called.
-Here, it's our job to return a Response that says "hey, get outta here!".
+Here, it's our job to return a Response that says "hey, get outta here!"::
+
+    // src/KnpU/CodeBattle/Security/Authentication
+    // ...
+
+    use Symfony\Component\HttpFoundation\JsonResponse;
+    use Symfony\Component\HttpFoundation\Request;
+    use Symfony\Component\Security\Core\Exception\AuthenticationException;
+    use Symfony\Component\Security\Http\EntryPoint\AuthenticationEntryPointInterface;
+    // ...
+
+    class ApiEntryPoint implements AuthenticationEntryPointInterface
+    {
+        // ...
+
+        public function start(Request $request, AuthenticationException $authException = null)
+        {
+            $message = $this->getMessage($authException);
+
+            $response = new JsonResponse(array('detail' => $message), 401);
+
+            return $response;
+        }
+
+        /**
+         * Gets the message from the specific AuthenticationException and then
+         * translates it. The translation process allows us to customize the
+         * messages we want - see the translations/en.yml file.
+         */
+        private function getMessage(AuthenticationException $authException = null)
+        {
+            $key = $authException ? $authException->getMessageKey() : 'authentication_required';
+            $parameters = $authException ? $authException->getMessageData() : array();
+
+            return $this->translator->trans($key, $parameters);
+        }
+    }
+
 So *that's* where the ``detail`` key is coming from, and it's set to some
 internal message that comes from the deep dark core of Silex's security that
 describes what went wrong.
@@ -102,6 +220,20 @@ describes what went wrong.
 Fortunately, I'm also translating that message, and we setup translations
 in episode 1. in this ``translations/`` directory. This is just a little
 key value pair. So let's copy that unhelpful "this not privileged request"
-thing that Silex's gives us and translate it to something nicer.
+thing that Silex's gives us and translate it to something nicer:
+
+.. code-block:: yaml
+
+    # translations/en.yml
+    authentication_required: Authentication Required
+    "Not privileged to request the resource.": "Authentication Required"
+
+Ok, rerun the tests!
+
+.. code-block:: bash
+
+    php vendor/bin/behat features/api/authentication.feature
+
+Fantastic!
 
-Ok, rerun the tests! Fantasic!
+.. _`API problem`: https://apigility.org/documentation/api-primer/error-reporting
diff --git a/knpu/episode2/securing-more-endpoints.rst b/knpu/episode2/securing-more-endpoints.rst
index 155dce4..d99c855 100644
--- a/knpu/episode2/securing-more-endpoints.rst
+++ b/knpu/episode2/securing-more-endpoints.rst
@@ -3,40 +3,157 @@ Securing More Endpoints
 
 Hey! We have this great system where users are actually being authenticated!
 Now we can start checking for security everywhere we need it. In ``newAction``
-we're requiring that you are logged in. Awesome! In ``showAction`` and ``listAction``
-we are going to leave those anonymous. In ``updateAction``, we *do* need some extra security.
-It's more than just being logged in: we need to check to see if our user
-is actually the owner of that programmer or not. So we just add some ``if``
-statement logic: ``if ($programmer->userId != $this->getLoggedInDser()->id``,
-then ``throw new AccessDeniedException``.
+we're requiring that you are logged in::
+
+    // src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+
+    public function newAction(Request $request)
+    {
+        if (!$this->isUserLoggedIn()) {
+            throw new AccessDeniedException();
+        }
+        // ...
+    }
+
+Awesome! In ``showAction`` and ``listAction`` we are going to leave those
+anonymous. In ``updateAction``, we *do* need some extra security. It's more
+than just being logged in: we need to check to see if our user is actually
+the owner of that programmer or not. So we just add some ``if`` statement
+logic: ``if ($programmer->userId != $this->getLoggedInUser()->id``, then
+``throw new AccessDeniedException``::
+
+    // src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+
+    public function updateAction($nickname, Request $request)
+    {
+        $programmer = $this->getProgrammerRepository()->findOneByNickname($nickname);
+
+        if ($programmer->userId != $this->getLoggedInUser()->id) {
+            throw new AccessDeniedException();
+        }
+
+        // ...
+    }
 
 Easy enough!
 
+Centralizing Security Logic Checks
+----------------------------------
+
 Since we're also going to use this in ``deleteAction`` let's go into our
-``BaseController`` and make this a generic function. Open up the
-``BaseController``, create a new protected function ``enforceProgrammerOwnershipSecurity``.
+``BaseController`` and make this a generic function. Open up the ``BaseController``,
+create a new protected function ``enforceProgrammerOwnershipSecurity``.
 Let's copy the logic in there and don't forget to add your ``AccessDeniedException``
-``use`` statement.
-
-Perfect, so now go back to our ``ProgrammerController``. It's a lot
-easier to just reuse this logic. Let's also use this down in ``deleteAction``.
-Now the only other thing that could go wrong, is if the user is
-not logged in at all and they hit ``updateAction``. Then, we would
-die inside this function. The problem is that `$this->getLoggedInUser`` 
-would be null and we'll call the ``id`` property on a null object. 
+``use`` statement::
+
+    // src/KnpU/CodeBattle/Controller/BaseController.php
+    // ...
+    use Symfony\Component\Security\Core\Exception\AccessDeniedException;
+    // ...
+
+    protected function enforceProgrammerOwnershipSecurity(Programmer $programmer)
+    {
+        if ($this->getLoggedInUser()->id != $programmer->userId) {
+            throw new AccessDeniedException();
+        }
+    }
+
+Perfect, so now go back to our ``ProgrammerController``. It's a lot easier
+to just reuse this logic. Let's also use this down in ``deleteAction``::
+
+    // src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+
+    public function updateAction($nickname, Request $request)
+    {
+        $programmer = $this->getProgrammerRepository()->findOneByNickname($nickname);
+        // ...
+
+        $this->enforceProgrammerOwnershipSecurity($programmer);
+
+        // ...
+    }
+
+    public function deleteAction($nickname)
+    {
+        $programmer = $this->getProgrammerRepository()->findOneByNickname($nickname);
+        // ...
+
+        $this->enforceProgrammerOwnershipSecurity($programmer);
+
+        // ...
+    }
+
+Now the only other thing that could go wrong, is if the user is not logged
+in at all and they hit ``updateAction``. Then, we would die inside this function.
+The problem is that ``$this->getLoggedInUser`` would be null and we'll call
+the ``id`` property on a null object::
+
+    // src/KnpU/CodeBattle/Controller/BaseController.php
+    // ...
+
+    protected function enforceProgrammerOwnershipSecurity(Programmer $programmer)
+    {
+        if ($this->getLoggedInUser()->id != $programmer->userId) {
+            throw new AccessDeniedException();
+        }
+    }
+
 So before we call this function, we need to make sure the user is at least 
 logged in. If they aren't, then they are definitely not the owner of this programmer.
 
 So let's create another function here called ``enforceUserSecurity``. In
-this case, go back to ``ProgrammerController`` and grab the logic right here. 
-There we go. And from inside ``enforceProgrammerOwnershipSecurity``
-we can just make sure that the user is actually logged in. And in ``ProgrammerController``,
-we can do the same thing and save ourselves a little bit of code.
+this case, go back to ``ProgrammerController`` and grab the logic right here::
+
+    // src/KnpU/CodeBattle/Controller/BaseController.php
+    // ...
+
+    protected function enforceUserSecurity()
+    {
+        if (!$this->isUserLoggedIn()) {
+            throw new AccessDeniedException();
+        }
+    }
+
+There we go. And from inside ``enforceProgrammerOwnershipSecurity`` we can
+just make sure that the user is actually logged in::
+
+    // src/KnpU/CodeBattle/Controller/BaseController.php
+    // ...
+
+    protected function enforceProgrammerOwnershipSecurity(Programmer $programmer)
+    {
+        $this->enforceUserSecurity();
+
+        if ($this->getLoggedInUser()->id != $programmer->userId) {
+            throw new AccessDeniedException();
+        }
+    }
+
+And in ``ProgrammerController``, we can do the same thing and save ourselves
+a little bit of code::
+
+    // src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+
+    public function newAction(Request $request)
+    {
+        $this->enforceUserSecurity();
+        // ...
+    }
+
 Between these two new methods, we have a really easy way to go function
 by function inside of our controller to make sure that we're enforcing the right
 type of security.
 
-Because we're sending our authentication headers in the background of our
-scenarios we should be able to run our entire ``programmer.feature`` and
-see it pass. Perfect! And just like that, we have our entire application locked
-down.
+Because we're sending our ``Authorization`` header in the background of our
+scenarios, we should be able to run our entire ``programmer.feature`` and
+see it pass:
+
+.. code-block:: bash
+
+    php vendor/bin/behat features/api/programmer.feature
+
+Perfect! And just like that, we have our entire application locked down.
diff --git a/knpu/episode2/serializer-annotations.rst b/knpu/episode2/serializer-annotations.rst
index b429fab..1820034 100644
--- a/knpu/episode2/serializer-annotations.rst
+++ b/knpu/episode2/serializer-annotations.rst
@@ -4,13 +4,28 @@ Serializer Annotations
 Alright, now let me show you one other powerful thing about the serializer. 
 The control you have over your objects! By default, it serializes *all* of
 your properties. But let's say we *don't* want the ``userId`` to be serialized.
-Afterall this isn't really an important field for the API, it's just the id
-of the user that created the programmer.
+After all this isn't really an important field for the API, it's just the
+``id`` of the user that created the programmer.
 
 To start, open up the feature file and add a line to test that this property
-isn't in the response. We're using a custom Behat context that I created
-for this project with a lot of these nice sentences. To see a list of all
-of them, you can run behat with the ``-dl`` option, which stands for "definition list":
+isn't in the response:
+
+.. code-block:: gherkin
+
+    # features/api/programmer.feature
+    # ...
+
+    Scenario: GET one programmer
+      Given the following programmers exist:
+        | nickname   | avatarNumber |
+        | UnitTester | 3            |
+      When I request "GET /api/programmers/UnitTester"
+      # ...
+      And the "userId" property should not exist
+
+We're using a custom Behat context that I created for this project with a
+lot of these nice sentences. To see a list of all of them, you can run behat
+with the ``-dl`` option, which stands for "definition list":
 
 .. code-block:: bash
 
@@ -19,6 +34,9 @@ of them, you can run behat with the ``-dl`` option, which stands for "definition
 Try running the tests again. It *should* fail, and it does - saying that
 the ``userId`` property should not exist, but we can see that it in fact is there.
 
+Configuring the Serializer with Annotations
+-------------------------------------------
+
 As soon as you want to take control over what properties are returned, we're
 going to use annotations. Let's look at their documentation first and find
 the `Annotation Reference`_ section - this is by far the most interesting
@@ -29,18 +47,74 @@ Remember, whenever you use an annotation, you need a ``use`` statement
 for it. PHPStorm is tagging in to help me auto-complete the ``ExclusionPolicy``
 class. Then I'll remove the last part and alias this to ``Serializer``. This
 will allow us to use any of the JMS serializer annotations by starting with
-``@Serializer``. For example, on top of the class, we can say
-``@Serializer\ExclusionPolicy("all")``. We've now told the serializer to
-not serialize *any* of the properties in this class, unless we tell it to
-specifically. Whereas before, it was serializing *everything*.
+``@Serializer``::
+
+    // src/KnpU/CodeBattle/Model/Programmer.php
+    // ...
+
+    /**
+     * @Serializer\ExclusionPolicy("all")
+     */
+    class Programmer
+    {
+        // ...
+    }
+
+For example, on top of the class, we can say ``@Serializer\ExclusionPolicy("all")``.
+We've now told the serializer to not serialize *any* of the properties in
+this class, unless we tell it to specifically. Whereas before, it was serializing
+*everything*.
 
 To actually include things, we whitelist them with the ``@Serializer\Expose``
 annotation. I'll copy this and use it on ``nickname``, ``avatarNumber``,
-``tagLine`` and ``powerLevel`` fields. This is just *one* of the customizations
-you can make with annotations.
+``tagLine`` and ``powerLevel`` fields::
+
+    // src/KnpU/CodeBattle/Model/Programmer.php
+    // ...
+
+    /**
+     * @Serializer\ExclusionPolicy("all")
+     */
+    class Programmer
+    {
+        // ...
+
+        public $id;
 
-Now let's re-run the test. Success! This time the ``userId`` is *not* returned
-in our JSON.
+        /**
+         * @Serializer\Expose
+         */
+        public $nickname;
+
+        /**
+         * @Serializer\Expose
+         */
+        public $avatarNumber;
+
+        /**
+         * @Serializer\Expose
+         */
+        public $tagLine;
+
+        public $userId;
+
+        /**
+         * @Serializer\Expose
+         */
+        public $powerLevel = 0;
+    }
+
+This is just *one* of the customizations you can make with annotations.
+
+Now let's re-run the test:
+
+.. code-block:: bash
+
+    php vendor/bin/behat
+
+Success! This time the ``userId`` is *not* returned in our JSON.
 
 If you want to know more, check out that annotation reference section. But
 we're also going to do more in the next videos.
+
+.. _`Annotation Reference`: http://jmsyst.com/libs/serializer/master/reference/annotations
\ No newline at end of file
diff --git a/knpu/episode2/serializer-configuration.rst b/knpu/episode2/serializer-configuration.rst
index 9ad46bb..250f75d 100644
--- a/knpu/episode2/serializer-configuration.rst
+++ b/knpu/episode2/serializer-configuration.rst
@@ -7,52 +7,161 @@ property, but you can see that the JSON response has a lot of other fields,
 but not ``tagLine``. I know what the issue is, so we'll fix it in a second.
 
 But first, one thing the test didn't show yet, is that we're losing the
-``Content-Type`` of ``application/json``. We need to centralize
-the logic that creates our Response as much as possible so that all of our
-responses are very very consistent. For example, right now - we're creating
-the ``Response`` in every controller, and so every controller method is responsible
-for remembering to set the ``Content-Type`` header. That's pretty error-prone,
-which means I am guaranteed to mess it up.
-
-Instead, let's go to BaseController the parent class of ``ProgrammerController``.
+``Content-Type`` of ``application/json``. We need to centralize the logic
+that creates our Response as much as possible so that all of our responses
+are very very consistent.
+
+For example, right now - we're creating the ``Response`` in every controller,
+and so every controller method is responsible for remembering to set the
+``Content-Type`` header::
+
+    src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+
+    public function newAction(Request $request)
+    {
+        // ...
+        $response = new Response($json, 201, array(
+            'Content-Type' => 'application/json'
+        ));
+        // ...
+    }
+
+    // new Response() exists in several other methods too
+
+That's pretty error-prone, which means I am guaranteed to mess it up.
+
+Central Method for Creating all API Responses
+---------------------------------------------
+
+Instead, let's go to ``BaseController``, the parent class of ``ProgrammerController``.
 Let's create a couple of new functions. First, back in ``ProgrammerController``,
 cut the ``serialize`` function, move it into the ``BaseController`` and change it
-to be ``protected``. Now, when we have multiple controllers in the future,
-we can just re-use this method to serialize other resources, like Battles.
+to be ``protected``::
+
+    // src/KnpU/CodeBattle/Controller/BaseController.php
+    // ...
+
+    protected function serialize($data, $format = 'json')
+    {
+        return $this->container['serializer']->serialize($data, $format);
+    }
+
+Now, when we have multiple controllers in the future, we can just re-use
+this method to serialize other resources, like Battles.
 
 Second, create a new function called ``createApiResponse`` with 2 arguments:
 the data and the status code. The data could be a ``Programmer`` a ``Battle``
 or anything else. Then we'll let *it* call the ``serialize`` function. And finally,
 create the ``Response`` and make sure the ``Content-Type`` header is set
-perfectly.
+perfectly::
+
+    // src/KnpU/CodeBattle/Controller/BaseController.php
+    // ...
+
+    protected function createApiResponse($data, $statusCode = 200)
+    {
+        $json = $this->serialize($data);
+
+        return new Response($json, $statusCode, array(
+            'Content-Type' => 'application/json'
+        ));
+    }
 
 Back in ``ProgrammerController``, we can simplify a lot of things. Let's
 search for ``new Response``, because we can replace these. In ``newAction``
-we can say ``$response = $this->createApiResponse`` and pass it the ``$programmer``
+we can say ``$response = $this->createApiResponse()`` and pass it the ``$programmer``
 object and the 201 status code. And we can still add any other headers we
-need.
+need::
+
+    src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+    
+    public function newAction(Request $request)
+    {
+        $programmer = new Programmer();
+        // ...
+
+        $response = $this->createApiResponse($programmer, 201);
+
+        $programmerUrl = $this->generateUrl(
+            'api_programmers_show',
+            ['nickname' => $programmer->nickname]
+        );
+        $response->headers->set('Location', $programmerUrl);
+
+        return $response;
+    }
 
 I'll copy this code and change the other spots in this controller. The ``deleteAction``
 returns a 204, which is the blank response. So there's no need to use this
 fancy serialization stuff here.
 
 Now let's try the tests again, so we can make sure we see *just* that same
-one failure. And we do!
+one failure:
+
+.. code-block:: bash
+
+    php vendor/bin/behat
+
+And we do!
+
+To Serialize or Not Serialize Null Values?
+------------------------------------------
 
 This failure is caused by something specific to the serializer. In this test,
 the programmer doesn't actually have a ``tagLine`` - we could see this if
-we looked in the database. When the serializer sees ``null`` values, it has
-2 options: return the property with a ``null`` value, or omit the property
-entirely. By default, the serializer actually omits ``null`` properties. We'll
-fix this, because I like always having the same fields on a response, even
-if some of the data is empty.
+we looked in the database:
+
+.. code-block:: gherkin
+
+    # features/api/programmer.feature
+    # ...
+    
+    Scenario: GET one programmer
+      Given the following programmers exist:
+        | nickname   | avatarNumber |
+        | UnitTester | 3            |
+      When I request "GET /api/programmers/UnitTester"
+      Then the response status code should be 200
+      And the following properties should exist:
+        """
+        nickname
+        avatarNumber
+        powerLevel
+        tagLine
+        """
+      And the "nickname" property should equal "UnitTester"
+
+When the serializer sees ``null`` values, it has 2 options: return the property
+with a ``null`` value, or omit the property entirely. By default, the serializer
+actually omits ``null`` properties. We'll fix this, because I like always
+having the same fields on a response, even if some of the data is empty.
 
 Go back to the ``serialize`` function. To configure the serializer, create
 a ``SerializationContext`` object. Next, call ``setSerializeNull`` and
-pass ``true``. Now, pass this context as the 3rd argument to ``serialize``.
+pass ``true``. Now, pass this context as the 3rd argument to ``serialize``::
+
+    // src/KnpU/CodeBattle/Controller/BaseController.php
+    // ...
+    
+    protected function serialize($data, $format = 'json')
+    {
+        $context = new SerializationContext();
+        $context->setSerializeNull(true);
+
+        return $this->container['serializer']->serialize($data, $format, $context);
+    }
+
 There's not a lot you can customize in this way, but ``serializeNull`` happens
 to be one of them.
 
-Back to the tests! Boom, everything passes! We've changed to use the serializer,
-and it's now taking care of all of the heavy-lifting for us. This will be
-really powerful as we serialize more and more objects.
+Back to the tests!
+
+.. code-block:: bash
+
+    php vendor/bin/behat
+
+Boom, everything passes! We've changed to use the serializer, and it's now
+taking care of all of the heavy-lifting for us. This will be really powerful
+as we serialize more and more objects.
diff --git a/knpu/episode2/serializer.rst b/knpu/episode2/serializer.rst
index 3ce573c..831b199 100644
--- a/knpu/episode2/serializer.rst
+++ b/knpu/episode2/serializer.rst
@@ -1,7 +1,7 @@
 The Serializer: Swiss-Army Knife of APIs
 ========================================
 
-Hey guys! Welcome to episode 2 of our RESTFUL API’s in the real world series.
+Hey guys! Welcome to episode 2 of our RESTFUL API's in the real world series.
 In episode 1 we covered a lot of the basics. Phew! And explained really important
 confusing terms like representations, resources, idempotency, GET, POST, PUT,
 PATCH and a lot of other things that really make it difficult to learn REST.
@@ -10,71 +10,203 @@ At This point I hope that you feel like you have a nice base because we're
 going to take that base and start doing some interesting things like 
 talking about serializers, hypermedia HATEOAS, documentation and a ton more.
 
+.. tip::
+
+    Hey, go download the starting code for this repository right on this page!
+
 I've already started by downloading the code for Episode 2 onto my computer.
 So I'm going to move over to the ``web/`` directory, which is the document
-root for our project, and use the built-in PHP Web server to get things running.
+root for our project, and use the built-in PHP Web server to get things running:
+
+.. code-block:: bash
+
+    cd /path/to/downloaded/code
+    cd web
+    php -S localhost:8000
+
 Let's try that out in our browser... and there we go.
 
-You can login as ryan@knplabs.com with password ``foo`` - very secure -
+    http://localhost:8000
+
+You can login as ``ryan@knplabs.com`` with password ``foo`` - very secure -
 and see the web side of our site. There's a web side of our site and an API
 version of our site, which we created in Episode 1.
 
-The project is pretty simple, but awesome, you create programmers,
-give them a tag line, select from of our avatars and then battle a project. 
-So we'll start a battle here, fight against "InstaFaceTweet"... some magic 
-happens, and boom! Our happy coder has defeated the InstaFaceTweet project.
+The project is pretty simple, but awesome, you create programmers, give them
+a tag line, select from of our avatars and then battle a project. So we'll
+start a battle here, fight against "InstaFaceTweet"... some magic  happens,
+and boom! Our happy coder has defeated the InstaFaceTweet project.
 
 So from an API perspective, you can see that we have a number of resources:
 we have programmers, we have projects and we also have battles. And they all
 relate to each other, which will be really important for episode 2.
 
+What We've Already Accomplished
+-------------------------------
+
 The API code all lives inside of the ``src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php``
 file. And in episode 1, we created endpoints for listing programmers, showing
-a single programmer, updating a programmer and deleting one. We
-also used Behat to make some nice scenarios for this. This makes sure that
-our API doesn't break. It also lets us design our API, before we think about
-implementing it.
+a single programmer, updating a programmer and deleting one::
+
+    // src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+
+    class ProgrammerController extends BaseController
+    {
+        // ...
+    
+        public function newAction(Request $request)
+        {
+            // ...
+        }
+        
+        // other methods for updating, deleting etc
+    }
+
+We also used Behat to make some nice scenarios for this:
+
+.. code-block:: gherkin
+
+    # features/api/programmer.feature
+    Feature: Programmer
+      # ...
+
+      Background:
+        Given the user "weaverryan" exists
+
+      Scenario: Create a programmer
+        Given I have the payload:
+          """
+          {
+            "nickname": "ObjectOrienter",
+            "avatarNumber" : "2",
+            "tagLine": "I'm from a test!"
+          }
+          """
+        When I request "POST /api/programmers"
+        Then the response status code should be 201
+        And the "Location" header should be "/api/programmers/ObjectOrienter"
+
+      # ... additional scenarios
+
+
+This makes sure that our API doesn't break. It also lets us design our API,
+before we think about implementing it.
 
 Whenever I have an API, I like to have an object for each resource. Before
 we started in episode 1, I created a ``Programmer`` object. And this is actually
 what we're allowing the API user to update, and we're using this object to
-send data back to the user.
+send data back to the user::
+
+    <?php
+
+    // src/KnpU/CodeBattle/Model/Programmer.php
+    // ...
+
+    class Programmer
+    {
+        public $id;
+
+        public $nickname;
+
+        public $avatarNumber;
+
+        public $tagLine;
+
+        // ... a few more properties
+    }
+
+Serialization: Turning Objects into JSON or XML
+-----------------------------------------------
 
 So one of the key things we were doing was turning objects into JSON. For
 example, let's look in ``showAction``. We're querying the database for a
 ``Programmer`` object, using a simple database-system I created in the background.
 Then ultimately, we pass that object into the ``serializeProgrammer`` function,
 which is a simple function we wrote inside this same class. It just takes
-a ``Programmer`` object and manually turns it into an array. This transformation
-from an object into an array is really important because we're going to be
-doing it for every resource across all of our endpoints.
+a ``Programmer`` object and manually turns it into an array::
+
+    // src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+    
+    public function showAction($nickname)
+    {
+        $programmer = $this->getProgrammerRepository()->findOneByNickname($nickname);
+
+        // ...
+        $data = $this->serializeProgrammer($programmer);
+        $response = new JsonResponse($data, 200);
+
+        return $response;
+    }
+
+    // ...
+    private function serializeProgrammer(Programmer $programmer)
+    {
+        return array(
+            'nickname' => $programmer->nickname,
+            'avatarNumber' => $programmer->avatarNumber,
+            'powerLevel' => $programmer->powerLevel,
+            'tagLine' => $programmer->tagLine,
+        );
+    }
+
+This transformation from an object into an array is really important because
+we're going to be doing it for every resource across all of our endpoints.
+
+Installing JMS Serializer
+~~~~~~~~~~~~~~~~~~~~~~~~~
 
 The first thing we're going to talk about is a library that makes this a lot
-easier and a lot more powerful, called a serializer. The one I like
-is called `jms/serializer`_, so let's Google for that. I'll show you how
-this works as we start using it. But the first step to installing any library
-is to bring it in via Composer.
+easier and a lot more powerful, called a serializer. The one I like is called
+`jms/serializer`_, so let's Google for that. I'll show you how this works
+as we start using it. But the first step to installing any library is to
+bring it in via Composer.
+
+I'm opening a new tab, and going back into the root of my project, and then
+copying that command:
 
-I'm opening a new tab, and going back into the root of my project, and then copying
-that command.
+.. code-block:: bash
 
-If you get a "command not found" for ``composer``, then you need to install
-it globally in your system. Or, you can go and download it directly, and
-you'll end up with a ``composer.phar`` file. In that case, you'll run
+    composer require jms/serializer
+
+If you get a "command not found" for ``composer``, then you need to
+`install it globally in your system`_. Or, you can go and download it directly,
+and you'll end up with a ``composer.phar`` file. In that case, you'll run
 ``php composer.phar require`` instead.
 
+Creating/Configuring the Serializer Object
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
 While we're waiting, let's go back and look at the usage a little bit. What
 we'll do is create an object called a "serializer", and there's this ``SerializerBuilder``
 that helps us with this. Then we'll pass it some data, which for us will
 be a ``Programmer`` object or a ``Battle`` object. And then it returns to
-you the actual JSON string. So it takes an object and turns it into a string.
+you the actual JSON string. So it takes an object and turns it into a string::
+
+    // from the serialization documentation
+    $serializer = JMS\Serializer\SerializerBuilder::create()->build();
+    $jsonContent = $serializer->serialize($data, 'json');
+    echo $jsonContent; // or return it in a Response
 
 Now this is a little bit specific to Silex, which is the framework we're
 building our API on, but in Silex, you have a spot where you can globally
 configure objects that you want to be able to use. They're called services.
 I'll create a new global object called ``serializer`` and we'll use code
 similar to what you just saw to create the ``serializer`` object. We're doing
-this because it will let me access that object from any of my controllers.
+this because it will let me access that object from any of my controllers::
+
+    // src/KnpU/CodeBattle/Application.php
+    // ...
+    
+    private function configureServices()
+    {
+        // ...
+        
+        $this['serializer'] = $this->share(function() use ($app) {
+            // todo ...
+        });
+    }
 
 Before I start typing anything here, I'll make sure everything is done downloading.
 Yes, it is - so I should be able to start referencing the serializer classes.
@@ -88,34 +220,104 @@ automatically. Finally, the last step tells the serializer to use the same
 property names that are on the ``Programmer`` object as the keys on the JSON.
 In other words, don't try to transform them in any way. And that's it!
 
+.. code-block:: php
+
+    // src/KnpU/CodeBattle/Application.php
+    // ...
+    
+    private function configureServices()
+    {
+        // ...
+        
+        $this['serializer'] = $this->share(function() use ($app) {
+            return \JMS\Serializer\SerializerBuilder::create()
+                ->setCacheDir($app['root_dir'].'/cache/serializer')
+                ->setDebug($app['debug'])
+                ->setPropertyNamingStrategy(new IdenticalPropertyNamingStrategy())
+                ->build();
+        });
+    }
+
+Using the Serializer Object
+---------------------------
+
 The important thing here is that we have a ``serializer`` object and we can
 access it from any of our controllers. Let's open our ``ProgrammerController``
 and rename ``serializeProgrammer`` to just ``serialize`` since it can serialize
-anything. I've setup my application so that I can reference any of those
-global objects by saying ``$this->container['serializer']``. This will look
-different for you: the important point is that we need to access that object
-we just configured.
+anything.
+
+I've setup my application so that I can reference any of those global objects
+by saying ``$this->container['serializer']``. This will look different for
+you: the important point is that we need to access that object we just configured.
 
 Now, just call ``serialize()`` on it, just like the documentation told us.
 I'll put ``json`` as the second argument so we get JSON. The serializer can
-also give us another format, like XML.
+also give us another format, like XML::
+
+    // src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+
+    protected function serialize($data)
+    {
+        return $this->container['serializer']->serialize($data, 'json');
+    }
 
 Perfect! Now let's look to see where we used the ``serializeProgrammer``
-function before. That old function return an array, but ``serialize`` now
+function before. That old function returned an array, but ``serialize`` now
 returns the JSON string. So now we can return a normal ``Response`` object
 and just pass the JSON string that we want. The one thing we'll lose is the
 ``Content-Type`` header being set to ``application/json``, but we'll fix
-that in a second. Let's go and make similar changes to the rest of our code.
+that in a second::
+
+    // src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+
+    public function newAction(Request $request)
+    {
+        $programmer = new Programmer();
+        // ...
+
+        $json = $this->serialize($programmer);
+        $response = new Response($json, 201);
+
+        // ... setting the Location header
+
+        return $response;
+    }
+
+Let's go and make similar changes to the rest of our code.
 
 In fact, when we have the collection of ``Programmer`` objects, things get 
 much easier. We can pass the entire array of objects and it's smart enough 
 to know how to serialize that. You can already start to see some of the 
-benefits of using a serializer.
+benefits of using a serializer::
+
+    // src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+    // ...
+
+    public function listAction()
+    {
+        $programmers = $this->getProgrammerRepository()->findAll();
+        $data = array('programmers' => $programmers);
+        $json = $this->serialize($data);
+
+        $response = new Response($json, 200);
+
+        return $response;
+    }
 
 Compared with what we had before, not a lot should have changed, because
 the serializer should give us a JSON structure with all the properties in
 ``Programmer``. That's practically the same as we were doing before.
 
-So let's run our tests! We've totally changed how a Programmer gets turned
-into JSON, but *almost* every test passes already! We'll debug that failure
-next.
+So let's run our tests!
+
+.. code-block:: bash
+
+    php vendor/bin/behat
+
+We've totally changed how a Programmer gets turned into JSON, but *almost*
+every test passes already! We'll debug that failure next.
+
+.. _`jms/serializer`: http://jmsyst.com/libs/serializer
+.. _`install it globally in your system`: https://getcomposer.org/doc/00-intro.md#globally
diff --git a/src/KnpU/CodeBattle/Controller/Api/BattleController.php b/src/KnpU/CodeBattle/Controller/Api/BattleController.php
index e02bddc..d8573d5 100644
--- a/src/KnpU/CodeBattle/Controller/Api/BattleController.php
+++ b/src/KnpU/CodeBattle/Controller/Api/BattleController.php
@@ -24,10 +24,15 @@ class BattleController extends BaseController
         $programmer = $this->getProgrammerRepository()->find($data->get('programmerId'));
         $project = $this->getProjectRepository()->find($data->get('projectId'));
 
-        if (!$programmer || !$project) {
-            $this->throwApiProblemValidationException(array(
-                'Invalid programmerId or projectId',
-            ));
+        $errors = array();
+        if (!$project) {
+            $errors['projectId'] = 'Invalid or missing projectId';
+        }
+        if (!$programmer) {
+            $errors['programmerId'] = 'Invalid or missing programmerId';
+        }
+        if ($errors) {
+            $this->throwApiProblemValidationException($errors);
         }
 
         // make sure I own this programmer
diff --git a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
index da5c8e3..961bb7b 100644
--- a/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
+++ b/src/KnpU/CodeBattle/Controller/Api/ProgrammerController.php
@@ -89,7 +89,13 @@ class ProgrammerController extends BaseController
 
     public function listAction(Request $request)
     {
-        $programmers = $this->getProgrammerRepository()->findAll();
+        $nicknameFilter = $request->query->get('nickname');
+        if ($nicknameFilter) {
+            $programmers = $this->getProgrammerRepository()
+                ->findAllLike(array('nickname' => '%'.$nicknameFilter.'%'));
+        } else {
+            $programmers = $this->getProgrammerRepository()->findAll();
+        }
 
         $limit = $request->query->get('limit', 5);
         $page = $request->query->get('page', 1);
diff --git a/src/KnpU/CodeBattle/Model/Battle.php b/src/KnpU/CodeBattle/Model/Battle.php
index 4571492..a1fc013 100644
--- a/src/KnpU/CodeBattle/Model/Battle.php
+++ b/src/KnpU/CodeBattle/Model/Battle.php
@@ -22,10 +22,13 @@ use Hateoas\Configuration\Annotation as Hateoas;
  *      ),
  *      embedded = "expr(object.programmer)"
  * )
+ * @Serializer\ExclusionPolicy("all")
  */
 class Battle
 {
-    /* All public properties are persisted */
+    /**
+     * @Serializer\Expose()
+     */
     public $id;
 
     /**
@@ -39,17 +42,17 @@ class Battle
     public $project;
 
     /**
-     * @Serializer\Expose
+     * @Serializer\Expose()
      */
-    public $didProgrammerWin = true;
+    public $didProgrammerWin;
 
     /**
-     * @Serializer\Expose
+     * @Serializer\Expose()
      */
     public $foughtAt;
 
     /**
-     * @Serializer\Expose
+     * @Serializer\Expose()
      */
     public $notes;
 }
